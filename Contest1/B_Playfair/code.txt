#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Playfair {
public:
	Playfair(string password);
	void print_key(void);
	string encrypt(string plain_text);

private:
	vector<vector<char>> key_matrix;
};

Playfair::Playfair(string password) : key_matrix(vector<vector<char>>(5, vector<char>(5)))
{
	vector<bool> seen(25);
	int matrix_row = 0;
	int matrix_col = 0;

	for (int i = 0, L = password.length(); i < L; ++i)
	{
		int letter_index = (password[i] >= 'J') ? password[i] - 66 : password[i] - 65;
		if (seen[letter_index] == 0)
		{
			seen[letter_index] = true;
			key_matrix[matrix_row][matrix_col] = (password[i] == 'J') ? 'I' : password[i];
			matrix_col = ++matrix_col % 5;
			if (matrix_col == 0)
			{
				++matrix_row;
			}
		}
	}

	for (int i = 0; i < 25; ++i)
	{
		if (seen[i] == 0)
		{
			key_matrix[matrix_row][matrix_col] = (i <= 8) ? i + 65 : i + 66;
			matrix_col = ++matrix_col % 5;
			if (matrix_col == 0)
			{
				++matrix_row;
			}
		}
	}
}

void Playfair::print_key(void)
{
	for (int i = 0; i < 5; ++i)
	{
		for (int j = 0; j < 5; ++j)
		{
			cout << key_matrix[i][j] << " ";
		}
		cout << endl;
	}
}

string Playfair::encrypt(string plain_text) 
{
	for (int i = 0; i < (plain_text.length()-1); ++i)
	{
		if (plain_text[i] == 'J')
		{
			plain_text[i] = 'I';
		}
		if (plain_text[i+1] == 'J')
		{
			plain_text[i+1] = 'I';
		}
		if (plain_text[i] == plain_text[i + 1])
		{
			if (plain_text[i] == 'X')
			{
				plain_text.insert(i + 1, 1, 'Q');
			}
			else
			{
				plain_text.insert(i + 1, 1, 'X');
			}
		}
	}

	if (plain_text.length() % 2 == 1)
	{
		if (plain_text[plain_text.length()-1] == 'X')
		{
			plain_text.append(1, 'Q');
		}
		else
		{
			plain_text.append(1, 'X');
		}
	}
	
	string cipher_text;
	for (int i = 0, L = plain_text.length(); i < L; i+=2)
	{

	}

}

int main()
{
	Playfair p("KERYWWORD");
	p.print_key();

	cout << p.encrypt("MEETXXINGSX") << endl;

	return 0;
}